// Generated by CoffeeScript 1.6.3
(function() {
  var a, b, c, d, freq, freqs, frequencyBase, frequencyPerStep, gid, instrument, op1, op2, op3, op4, phasor2, phasor4;

  instrument = "celesta";

  if (instrument === "piano") {
    freq = 440.0;
    a = T("sin", freq);
    b = T("sin", freq * 2, 0.5);
    c = T("sin", freq * 4, 0.25);
    d = T("sin", freq * 5, 0.125);
    frequencyBase = 440;
    frequencyPerStep = 440 / 12;
    freqs = {};
    freqs[b] = 2;
    freqs[c] = 4;
    freqs[d] = 5;
    window.adsr = T("adsr", "24db", 5, 1000, 0.0, 2500);
    window.synth = T("*", T("+", a, b, c, d), adsr);
    window.synth.touchDown = function(newFrequency) {
      var multiplier, _i, _len, _ref, _synth;
      _ref = [a, b, c, d, synth];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _synth = _ref[_i];
        multiplier = freqs[_synth] || 1;
        _synth.set({
          freq: newFrequency * multiplier
        });
      }
      synth.args[1].bang();
      return this.play();
    };
    window.synth.touchUp = function(fre) {
      return synth.args[1].keyoff();
    };
  } else if (instrument === "celesta") {
    freq = 440.0;
    op1 = T("oscx", T("phasor", 200), 0.01).set({
      fb: 0.1
    });
    phasor2 = T("phasor", freq);
    op2 = T("*", T("oscx", T("+", phasor2, op1), 0.4), T("adsr", "32db", 0, 450, 0.4, 500));
    op3 = T("oscx", T("phasor", freq * 14), 0.1);
    phasor4 = T("phasor", freq * 2);
    op4 = T("*", T("oscx", T("+", phasor4, op3), 1.0), T("adsr", "24db", 0, 250, 0.1, 500));
    window.synth = T("+", op2, op4);
    window.synth.touchDown = function(newFrequency) {
      this.pause();
      phasor2.set({
        freq: newFrequency
      });
      phasor4.set({
        freq: newFrequency * 2
      });
      op2.args[1].bang();
      op4.args[1].bang();
      return this.play();
    };
    window.synth.touchUp = function(fre) {
      op2.args[1].keyoff();
      return op4.args[1].keyoff();
    };
  }

  gid = function(name) {
    return document.getElementById(name);
  };

  window.mandalas = {
    initialize: function() {
      console.log("initialize binding events...");
      return this.bindEvents();
    },
    bindEvents: function() {
      document.addEventListener('deviceready', this.onDeviceReady, false);
      return console.log("events binded!");
    },
    onDeviceReady: function() {
      return console.log("Ok! device ready!");
    }
  };

  window.app = angular.module("mandala-app", ['angular-gestures']);

  window.main = function($scope) {
    var livro, setAnimation, setAnimationState, _i, _j, _len, _len1, _ref, _ref1;
    setAnimationState = function(image, state) {
      if (image !== null) {
        return image.style.webkitAnimationPlayState = image.style.mozAnimationPlayState = image.style.oAnimationPlayState = image.style.animationPlayState = state;
      }
    };
    setAnimation = function(image, actualAnimation) {
      if (image !== null) {
        return image.style.webkitAnimation = image.style.mozAnimation = image.style.oAnimation = image.style.animation = actualAnimation;
      }
    };
    $scope.livros_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
    $scope.livros_b = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    $scope.fromRPM = function() {
      return 60.0 / $scope.accelerator;
    };
    $scope.mandalas = [];
    _ref = $scope.livros_a;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      livro = _ref[_i];
      $scope.mandalas.push("mandalas/1/500x500/0" + livro + "b.png");
    }
    _ref1 = $scope.livros_b;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      livro = _ref1[_j];
      $scope.mandalas.push("mandalas/2/500x500/0" + livro + "b.png");
    }
    $scope.imgMandala = function(mandala) {
      return document.querySelector("img[src='" + mandala + "']");
    };
    $scope.imgMandalas = function() {
      var mandala, _k, _len2, _ref2, _results;
      _ref2 = $scope.mandalas;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        mandala = _ref2[_k];
        _results.push($scope.imgMandala(mandala));
      }
      return _results;
    };
    $scope.velocimeter = function() {
      return "" + $scope.accelerator + " RPM";
    };
    $scope.accelerate = function() {
      var mandala, newAnimation, _k, _len2, _ref2;
      _ref2 = $scope.imgMandalas();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        mandala = _ref2[_k];
        if (mandala !== null) {
          setAnimation(mandala, "");
        }
      }
      newAnimation = function() {
        var actualAnimation, _l, _len3, _ref3, _results;
        actualAnimation = "rotation " + ($scope.fromRPM()) + "s infinite linear";
        _ref3 = $scope.imgMandalas();
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          mandala = _ref3[_l];
          _results.push(setAnimation(mandala, actualAnimation));
        }
        return _results;
      };
      setTimeout(newAnimation, 200);
      if (!$scope.turn_on_motor) {
        return $scope.turn_on_motor = true;
      }
    };
    $scope.showOriginal = function(element) {
      if (!$scope.turn_on_motor) {
        if ($scope.currentMandala === null || $scope.currentMandala !== element.mandala) {
          $scope.currentMandala = element.mandala;
          $scope.showCurrentMandalaPalette();
          return element.mandala = element.mandala.replace("b.png", ".png");
        }
      }
    };
    $scope.showInCircle = function(element) {
      if (!$scope.turn_on_motor) {
        return element.mandala = element.mandala.replace(".png", "b.png");
      }
    };
    $scope.switch_on_off = function() {
      var image, state, _k, _len2, _ref2, _results;
      if ($scope.turn_on_motor) {
        state = "running";
      } else {
        state = "paused";
      }
      _ref2 = $scope.imgMandalas();
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        image = _ref2[_k];
        _results.push(setAnimationState(image, state));
      }
      return _results;
    };
    $scope.turn_on_motor = false;
    $scope.accelerator = 0;
    $scope.mute = true;
    $scope.switch_mute = function() {
      if ($scope.mute) {
        return synth.pause();
      } else {
        return synth.play();
      }
    };
    $scope.colorThief = new ColorThief();
    $scope.play = function(color) {
      var betterNote, diff, joshnstonMap, max, multiplier, n, newFrequency, note, noteC, pianoNotes, predominantColor, rgb, _k, _len2;
      joshnstonMap = [[255, 255, 0], [50, 0, 255], [255, 150, 0], [0, 210, 180], [255, 0, 0], [130, 255, 0], [150, 0, 200], [255, 195, 0], [30, 130, 255], [255, 100, 0], [0, 200, 0], [225, 0, 225]];
      betterNote = null;
      diff = {};
      note = 1;
      noteC = 65.406;
      pianoNotes = sc.Scale.chromatic().degreeToFreq(sc.Range(12 * 5), noteC);
      console.log(pianoNotes);
      for (_k = 0, _len2 = joshnstonMap.length; _k < _len2; _k++) {
        rgb = joshnstonMap[_k];
        rgb = joshnstonMap[note - 1];
        diff[note] = Math.abs(rgb[0] - color[0]) + Math.abs(rgb[1] - color[1]) + Math.abs(rgb[2] - color[2]);
        if (betterNote === null || diff[note] < diff[betterNote]) {
          betterNote = note;
        }
        note += 1;
      }
      console.log(color, "currentNote:", betterNote, diff, " diff: ", diff[betterNote]);
      max = function(array) {
        var m, n, _l, _len3;
        n = null;
        for (_l = 0, _len3 = array.length; _l < _len3; _l++) {
          m = array[_l];
          if (n === null || m > n) {
            n = m;
          }
        }
        return n;
      };
      predominantColor = max(color);
      console.log("predominantColor", predominantColor);
      multiplier = Math.round((predominantColor / 255) * 5);
      n = diff[betterNote] / 5;
      console.log("scale up", n);
      newFrequency = pianoNotes[(betterNote - 1) * multiplier];
      console.log("newFrequency", newFrequency, "note", pianoNotes[(betterNote - 1) * multiplier], "multiplier", multiplier);
      return synth.touchDown(newFrequency);
    };
    $scope.touchUp = function() {
      return synth.touchUp();
    };
    return $scope.showCurrentMandalaPalette = function() {
      var img;
      img = $scope.imgMandala($scope.currentMandala);
      if (img === null) {
        return;
      }
      return $scope.currentMandalaPalette = $scope.colorThief.getPalette(img, 13);
    };
  };

}).call(this);
