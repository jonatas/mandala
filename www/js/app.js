// Generated by CoffeeScript 1.6.3
(function() {
  var gid;

  gid = function(name) {
    return document.getElementById(name);
  };

  window.app = angular.module("mandala-app", []);

  window.synth = {};

  window.main = function($scope) {
    var livro, setAnimation, setAnimationState, _i, _j, _len, _len1, _ref, _ref1;
    setAnimationState = function(image, state) {
      if (image !== null) {
        return image.style.webkitAnimationPlayState = image.style.mozAnimationPlayState = image.style.oAnimationPlayState = image.style.animationPlayState = state;
      }
    };
    setAnimation = function(image, actualAnimation) {
      if (image !== null) {
        return image.style.webkitAnimation = image.style.mozAnimation = image.style.oAnimation = image.style.animation = actualAnimation;
      }
    };
    $scope.sc = sc;
    $scope.livros_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
    $scope.livros_b = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    $scope.fromRPM = function() {
      return 60.0 / $scope.accelerator;
    };
    $scope.mandalas = [];
    _ref = $scope.livros_a;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      livro = _ref[_i];
      $scope.mandalas.push("mandalas/1/500x500/0" + livro + "b.png");
    }
    _ref1 = $scope.livros_b;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      livro = _ref1[_j];
      $scope.mandalas.push("mandalas/2/500x500/0" + livro + "b.png");
    }
    $scope.imgMandala = function(mandala) {
      return document.querySelector("img[src='" + mandala + "']");
    };
    $scope.imgMandalas = function() {
      var mandala, _k, _len2, _ref2, _results;
      _ref2 = $scope.mandalas;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        mandala = _ref2[_k];
        _results.push($scope.imgMandala(mandala));
      }
      return _results;
    };
    $scope.velocimeter = function() {
      return "" + $scope.accelerator + " RPM";
    };
    $scope.accelerate = function() {
      var mandala, newAnimation, _k, _len2, _ref2;
      _ref2 = $scope.imgMandalas();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        mandala = _ref2[_k];
        if (mandala !== null) {
          setAnimation(mandala, "");
        }
      }
      newAnimation = function() {
        var actualAnimation, _l, _len3, _ref3, _results;
        actualAnimation = "rotation " + ($scope.fromRPM()) + "s infinite linear";
        _ref3 = $scope.imgMandalas();
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          mandala = _ref3[_l];
          _results.push(setAnimation(mandala, actualAnimation));
        }
        return _results;
      };
      setTimeout(newAnimation, 200);
      if (!$scope.turn_on_motor) {
        return $scope.turn_on_motor = true;
      }
    };
    $scope.showOriginal = function(element) {
      if (!$scope.turn_on_motor) {
        if ($scope.currentMandala === null || $scope.currentMandala !== element.mandala) {
          $scope.currentMandala = element.mandala;
          $scope.showCurrentMandalaPalette();
          return element.mandala = element.mandala.replace("b.png", ".png");
        }
      }
    };
    $scope.showInCircle = function(element) {
      if (!$scope.turn_on_motor) {
        return element.mandala = element.mandala.replace(".png", "b.png");
      }
    };
    $scope.switch_on_off = function() {
      var image, state, _k, _len2, _ref2, _results;
      if ($scope.turn_on_motor) {
        state = "running";
      } else {
        state = "paused";
      }
      _ref2 = $scope.imgMandalas();
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        image = _ref2[_k];
        _results.push(setAnimationState(image, state));
      }
      return _results;
    };
    $scope.turn_on_motor = false;
    $scope.accelerator = 0;
    $scope.mute = true;
    $scope.colorThief = new ColorThief();
    $scope.play = function(note) {
      T.soundfont.setInstrument(0);
      return T.soundfont.play(note);
    };
    $scope.stop = function(note) {
      return T.soundfont.stop(note);
    };
    return $scope.showCurrentMandalaPalette = function() {
      var baseColor, baseNote, color, colorsPallete, findBetterNoteFor, findWithFreq, freq, freqFor, img, joshnstonMap, note, noteC, noteForBaseColor, numberOfScales, pianoNotes, _k, _len2, _ref2;
      img = $scope.imgMandala($scope.currentMandala);
      if (img === null) {
        return;
      }
      joshnstonMap = [[255, 255, 0], [50, 0, 255], [255, 150, 0], [0, 210, 180], [255, 0, 0], [130, 255, 0], [150, 0, 200], [255, 195, 0], [30, 130, 255], [255, 100, 0], [0, 200, 0], [225, 0, 225]];
      findBetterNoteFor = function(color) {
        var betterNote, diff, note, rgb, _k, _len2;
        betterNote = null;
        diff = {};
        note = 1;
        for (_k = 0, _len2 = joshnstonMap.length; _k < _len2; _k++) {
          rgb = joshnstonMap[_k];
          rgb = joshnstonMap[note - 1];
          diff[note] = Math.abs(rgb[0] - color[0]) + Math.abs(rgb[1] - color[1]) + Math.abs(rgb[2] - color[2]);
          if (betterNote === null || diff[note] < diff[betterNote]) {
            betterNote = note;
          }
          note += 1;
        }
        return betterNote;
      };
      noteC = 65.406;
      baseNote = sc.Scale.chromatic().degreeToFreq(sc.Range(12), noteC);
      baseColor = $scope.colorThief.getColor(img);
      noteForBaseColor = $scope.sc.cpsmidi(baseNote[findBetterNoteFor(baseColor)]);
      pianoNotes = sc.Scale.chromatic().degreeToFreq(sc.Range(12 * 5), noteC);
      console.log("baseColor: ", baseColor, [baseColor[0], baseColor[1], baseColor[2]].max());
      numberOfScales = 5;
      freqFor = function(color) {
        var betterNote, multiplier, predominantColor;
        predominantColor = color[0];
        if (predominantColor < color[1]) {
          predominantColor = color[1];
        }
        if (predominantColor < color[2]) {
          predominantColor = color[2];
        }
        multiplier = parseInt(predominantColor / 255 * numberOfScales);
        betterNote = findBetterNoteFor(color);
        console.log("predominantColor:: " + predominantColor, "betterNote: " + betterNote + " for color: " + color + ", multiplier: " + multiplier + ", pianoNotes Length: " + pianoNotes.length + " [" + ((betterNote - 1) * multiplier) + "]");
        return pianoNotes[(betterNote - 1) * multiplier] || pianoNotes[betterNote] || 440;
      };
      colorsPallete = [];
      findWithFreq = function(freq) {
        var mandala, _k, _len2;
        for (_k = 0, _len2 = colorsPallete.length; _k < _len2; _k++) {
          mandala = colorsPallete[_k];
          if (mandala.freq === freq) {
            return true;
          }
        }
        return false;
      };
      _ref2 = $scope.colorThief.getPalette(img, 13);
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        color = _ref2[_k];
        freq = freqFor(color);
        note = parseInt($scope.sc.cpsmidi(freq));
        freq = Math.round(freq * 100) / 100;
        if (!findWithFreq(freq)) {
          colorsPallete.push({
            color: color,
            note: note,
            freq: freq
          });
        }
      }
      return $scope.currentMandalaPalette = colorsPallete.sort(function(a, b) {
        if (a.note > b.note) {
          return 1;
        } else {
          return -1;
        }
      });
    };
  };

}).call(this);
